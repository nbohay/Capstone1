[{"properties":{"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Carousel for header (wide)","width":"1320","height":"460","maxwidth":"","responsiveunder":"1320","sublayercontainer":"0","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","twowayslideshow":"on","skin":"carousel","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 80px;","thumb_nav":"always","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"100","thumb_inactive_opacity":"40","autoplayvideos":"on","autopauseslideshow":"disabled","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"22260","background":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-01.png","thumbnailId":"22263","thumbnail":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-icon-01.png","slidedelay":"7000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"BEST PRICE!","media":"text","type":"h2","imageId":"","image":"","html":"BEST PRICE!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10\\\",\\\"padding-right\\\":\\\"15\\\",\\\"padding-bottom\\\":\\\"12\\\",\\\"padding-left\\\":\\\"15\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"124px","left":"153px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"$$$","media":"text","type":"h3","imageId":"","image":"","html":"only $899","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"8\\\",\\\"padding-right\\\":\\\"13\\\",\\\"padding-bottom\\\":\\\"10\\\",\\\"padding-left\\\":\\\"13\\\",\\\"font-size\\\":\\\"20px\\\",\\\"line-height\\\":\\\"20px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#2981e9\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"168px","left":"243px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"22262","background":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-086.png","thumbnailId":"22265","thumbnail":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-icon-9.png","slidedelay":"7000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"ULTRA 20038K","media":"text","type":"h2","imageId":"","image":"","html":"ULTRA 20038K","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10\\\",\\\"padding-right\\\":\\\"15\\\",\\\"padding-bottom\\\":\\\"12\\\",\\\"padding-left\\\":\\\"15\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"154px","left":"895px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"$$$","media":"text","type":"h3","imageId":"","image":"","html":"only $1499","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"8\\\",\\\"padding-right\\\":\\\"13\\\",\\\"padding-bottom\\\":\\\"10\\\",\\\"padding-left\\\":\\\"13\\\",\\\"font-size\\\":\\\"20px\\\",\\\"line-height\\\":\\\"20px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#d03bd4\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"203px","left":"883px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"ULTRA 20038K copy","media":"text","type":"h2","imageId":"","image":"","html":"SUPER 12055J","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10\\\",\\\"padding-right\\\":\\\"15\\\",\\\"padding-bottom\\\":\\\"12\\\",\\\"padding-left\\\":\\\"15\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"157px","left":"202px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"$$$ copy","media":"text","type":"h3","imageId":"","image":"","html":"only $2099","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"8\\\",\\\"padding-right\\\":\\\"13\\\",\\\"padding-bottom\\\":\\\"10\\\",\\\"padding-left\\\":\\\"13\\\",\\\"font-size\\\":\\\"20px\\\",\\\"line-height\\\":\\\"20px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#2981e9\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"205px","left":"312px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"22261","background":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-07.png","thumbnailId":"22264","thumbnail":"http:\/\/the7.dream-demo.com\/main\/wp-content\/uploads\/sites\/9\/2014\/04\/car-icon-7.png","slidedelay":"7000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"BEST PRICE!","media":"text","type":"h2","imageId":"","image":"","html":"SPECIAL OFFER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"10\\\",\\\"padding-right\\\":\\\"15\\\",\\\"padding-bottom\\\":\\\"12\\\",\\\"padding-left\\\":\\\"15\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"132px","left":"955px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"$$$","media":"text","type":"h3","imageId":"","image":"","html":"only $1099","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"8\\\",\\\"padding-right\\\":\\\"13\\\",\\\"padding-bottom\\\":\\\"10\\\",\\\"padding-left\\\":\\\"13\\\",\\\"font-size\\\":\\\"20px\\\",\\\"line-height\\\":\\\"20px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#2981e9\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"179px","left":"941px","style":"box-shadow: 2px 2px 7px -4px black;","id":"","class":"","title":"","alt":"","rel":""}]}]}]